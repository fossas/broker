name: release

on:
  push:
    tags:
      - '*-?v[0-9]+*'

jobs:
  metadata:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: actions-rs/install@v0.1
        with:
          crate: parse-changelog
          version: latest
      - run: |
        VERSION=$(cargo metadata | jq -r '.packages[] | select(.name == "broker") | .version')
        TITLE=$(parse-changelog CHANGELOG.md --title)
        CHANGELOG=$(parse-changelog CHANGELOG.md $VERSION)
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"
        echo "title=$TITLE" >> "$GITHUB_OUTPUT"
        echo "changelog=$CHANGELOG" >> "$GITHUB_OUTPUT"

  create-release:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_TITLE: ${{ steps.metadata.outputs.title }}
      RELEASE_CHANGELOG: ${{ steps.metadata.outputs.changelog }}
    steps:
      - run: |
        echo "$RELEASE_CHANGELOG" >> release_changelog.md
        gh release create ${{ github.ref_name }} --draft --title="$RELEASE_TITLE" --notes-file=release_changelog.md
        gh release upload ${{ github.ref_name }} LICENSE CHANGELOG.md README.md

  build:
    strategy:
      matrix:
        os: ['windows-latest', 'ubuntu-latest', 'macos-latest']
        include:
          - os: ubuntu-latest
            os-name: linux
            toolchain: stable
            cmd-build: cross build --features jemalloc --target=x86_64-unknown-linux-musl --release
            cmd-test: cross nextest run --features jemalloc --target=x86_64-unknown-linux-musl
            binary-ext:
          - os: macos-latest
            os-name: macos
            toolchain: stable
            cmd-build: cargo build --release
            cmd-test: cargo nextest run
            binary-ext:
          - os: windows-latest
            os-name: windows
            toolchain: '1.68'
            cmd-build: cargo build --release
            cmd-test: cargo nextest run
            binary-ext: .exe

    needs: [create-release]
    if: ${{ needs.create-release.result == 'success' }}
    name: ${{ matrix.os-name }}-build
    runs-on: ${{ matrix.os }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BROKER_BIN: broker${{ matrix.binary-ext }}
      OUTPUT_BIN: broker-${{ steps.metadata.outputs.version }}-${{ matrix.os-name }}${{ matrix.binary-ext }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
      - uses: actions-rs/install@v0.1
        with:
          crate: cross
          version: latest
      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-nextest
          version: latest
      - run: ${{ matrix.cmd-test }}
      - run: ${{ matrix.cmd-build }}
      - run: |
          mkdir release
          cp target/release/$BROKER_BIN release/$OUTPUT_BIN
          gh release upload ${{ github.ref_name }} $OUTPUT_BIN

  # We'll uncomment this in a future release when we're confident this release process works.
  #
  # publish-release:
  #   needs: [create-release, build]
  #   if: ${{ needs.create-release.result == 'success' && needs.build.result == 'success' }}
  #   runs-on: ubuntu-latest
  #   env:
  #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: gh release edit ${{ github.ref_name }} --draft=false
